var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from "react";
var ClickableBox = /** @class */ (function (_super) {
    __extends(ClickableBox, _super);
    function ClickableBox(props) {
        var _this = _super.call(this, props) || this;
        _this.onKeyPress = _this.onKeyPress.bind(_this);
        return _this;
    }
    ClickableBox.prototype.onKeyPress = function (event) {
        var _a = this.props, onClick = _a.onClick, onKeyPress = _a.onKeyPress;
        switch (event.key) {
            case " ":
                // If space is pressed and both `onKeyPress` and `onClick` exist, only
                // run `onKeyPress`.
                if (onClick && onKeyPress) {
                    onKeyPress(event);
                }
                else if (onKeyPress) {
                    onKeyPress(event);
                }
                else if (onClick) {
                    onClick(event);
                }
                break;
            case "Enter":
                // `onKeyPress` should run first.
                if (onKeyPress) {
                    onKeyPress(event);
                    // Prevent `onClick` from running in the rare case that the user has
                    // a custom `onKeyPress` that contains `event.preventDefault()`.
                    if (event.isDefaultPrevented()) {
                        return;
                    }
                }
                if (onClick)
                    onClick(event);
                break;
            default:
                break;
        }
    };
    ClickableBox.prototype.render = function () {
        var _a = this.props, Component = _a.is, innerRef = _a.innerRef, onClick = _a.onClick, disabled = _a.disabled, tabIndex = _a.tabIndex, 
        // Prevent `onKeyPress` from being spread since we will call it in
        // `this.onKeyPress` and we don't want the user function to overwrite our
        // behavior.
        onKeyPress = _a.onKeyPress, otherProps = __rest(_a, ["is", "innerRef", "onClick", "disabled", "tabIndex", "onKeyPress"]);
        return (React.createElement(Component
        // Don't set `tabIndex` if `disabled`. We do set it though even if
        // `onClick` is not provided so that it mimics the behavior of a native
        // `button`. We also prevent the user from passing in their own
        // `tabIndex` in the case that it is disabled. This is better than a
        // `-1` because `-1` will make the element focusable but not reachable
        // via keyboard navigation.
        , __assign({ 
            // Don't set `tabIndex` if `disabled`. We do set it though even if
            // `onClick` is not provided so that it mimics the behavior of a native
            // `button`. We also prevent the user from passing in their own
            // `tabIndex` in the case that it is disabled. This is better than a
            // `-1` because `-1` will make the element focusable but not reachable
            // via keyboard navigation.
            tabIndex: !disabled ? tabIndex : undefined, 
            // Always have `role="button"`, even if it is disabled. Combined with
            // `aria-disabled`, screen readers will announce this the same as
            // a native `button` element.
            role: "button", 
            // Only fire these events if the `disabled` prop is not true.
            onKeyPress: !disabled ? this.onKeyPress : undefined, onClick: !disabled ? onClick : undefined, "aria-disabled": disabled ? "true" : undefined, ref: innerRef }, otherProps)));
    };
    return ClickableBox;
}(React.Component));
export default React.forwardRef(function (props, ref) { return (React.createElement(ClickableBox, __assign({ innerRef: ref }, props))); });
