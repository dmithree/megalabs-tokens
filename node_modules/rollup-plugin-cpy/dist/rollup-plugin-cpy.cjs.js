'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var cpy = _interopDefault(require('cpy'));
var isObject = _interopDefault(require('lodash.isobject'));
var chalk = _interopDefault(require('chalk'));
var mkdirp = _interopDefault(require('mkdirp'));

var name = "rollup-plugin-cpy";

function objectWithoutProperties (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }

var successMessage = function (files$$1, dest) { return console.log(((chalk.green('Successfully copied')) + " " + files$$1 + "  ->  " + dest)); };

var errorMessage = function (files$$1, dest, err) { return console.log(((chalk.red('Error copying')) + " " + files$$1 + "  ->  " + dest + "\n" + err + "\n")); };

var copyFiles = function (params) {
  var files$$1 = params.files;
  var dest = params.dest;
  var options = params.options;
  if (options && !isObject(options)) {
    throw new Error('options param (3rd param after files and dest) should be an object.')
  }

  var ref = options || {};
  var verbose = ref.verbose; if ( verbose === void 0 ) verbose = false;
  var rest = objectWithoutProperties( ref, ["verbose"] );
  var restOptions = rest;

  mkdirp.sync(dest);
  cpy(files$$1, dest, restOptions)
    .then(function () {
      if (verbose) {
        successMessage(files$$1, dest);
      }
    })
    .catch(function (err) {
      throw new Error(errorMessage(files$$1, dest, err))
    });
};

function index(options) {
  return {
    name: name,
    onwrite: function () {
      if (Array.isArray(options)) {
        options.forEach(function (option) {
          copyFiles(option);
        });
      } else {
        copyFiles(options);
      }
    },
  }
}

module.exports = index;
