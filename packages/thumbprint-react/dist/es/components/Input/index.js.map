{"version":3,"file":"index.js","sources":["../../../../components/Input/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { NavigationCloseSmall } from '../../icons/index.jsx';\nimport { InputRowContext } from '../InputRow/index.jsx';\nimport styles from './index.module.scss';\n\ntype UiState = 'disabled' | 'readonly' | 'error' | 'default';\n\ntype ContextValue = {\n    hasValue: boolean;\n    size?: 'large' | 'small';\n    position: 'left' | 'right';\n};\n\nconst Context = React.createContext<ContextValue>({\n    hasValue: false,\n    size: undefined,\n    position: 'left',\n});\n\n/**\n * Prioritize the mutually exclusive UI states the user may end up in.\n */\nconst getUIState = ({\n    isDisabled,\n    isReadOnly,\n    hasError,\n}: Pick<InputPropTypes, 'isDisabled' | 'isReadOnly' | 'hasError'>): UiState => {\n    if (isDisabled) {\n        return 'disabled';\n    }\n\n    if (isReadOnly) {\n        return 'readonly';\n    }\n\n    if (hasError) {\n        return 'error';\n    }\n\n    return 'default';\n};\n\ninterface InputIconContainerPropTypes {\n    children: React.ReactNode;\n    style?: { color: string };\n}\n\n/**\n * This component is not exported. It wraps the `InputClearButton` and `InputIcon`, applying\n * classes to position the icon. It does this by using `create-react-context`, a ponyfill for\n * React’s context functionality. This makes it easier for consumers to use `InputClearButton` and\n * `InputIcon` because they won’t have to specify as many props.\n * @private\n */\nconst InputIconContainer = ({ children, style }: InputIconContainerPropTypes): JSX.Element => (\n    <Context.Consumer>\n        {(theme): JSX.Element => {\n            const position = theme && theme.position;\n            const size = theme && theme.size;\n\n            return (\n                <div\n                    className={classNames({\n                        [styles.inputIconContainer]: true,\n                        // Applies when used on left\n                        [styles.inputIconContainerPositionLeft]: position === 'left',\n                        [styles.inputIconContainerPositionLeftSizeSmall]:\n                            position === 'left' && size === 'small',\n                        [styles.inputIconContainerPositionLeftSizeLarge]:\n                            position === 'left' && size === 'large',\n                        // Applies when used on right\n                        [styles.inputIconContainerPositionRight]: position === 'right',\n                        [styles.inputIconContainerPositionRightSizeSmall]:\n                            position === 'right' && size === 'small',\n                        [styles.inputIconContainerPositionRightSizeLarge]:\n                            position === 'right' && size === 'large',\n                    })}\n                    style={style}\n                >\n                    {children}\n                </div>\n            );\n        }}\n    </Context.Consumer>\n);\n\ninterface InputClearButtonPropTypes {\n    onClick: () => void;\n}\n\n/**\n * Accessible button that makes it easy to add a \"Clear\" button to a text input. It should be used\n * with the `innerRight` prop in `Input`.\n */\nconst InputClearButton = ({ onClick }: InputClearButtonPropTypes): JSX.Element => (\n    <InputIconContainer>\n        <Context.Consumer>\n            {(theme): JSX.Element => (\n                <div\n                    className={classNames({\n                        displayNone: theme && !theme.hasValue,\n                    })}\n                >\n                    <button\n                        className={styles.unstyledButton}\n                        aria-label=\"Clear input\"\n                        onClick={onClick}\n                        type=\"button\"\n                    >\n                        <NavigationCloseSmall />\n                    </button>\n                </div>\n            )}\n        </Context.Consumer>\n    </InputIconContainer>\n);\n\nconst ClearButton = InputClearButton;\n\ninterface InputIconPropTypes {\n    /**\n     * Set the icon color with a color from [Thumbprint Tokens](/tokens/).\n     * @private\n     */\n    color?: string;\n    /**\n     * An icon component from [Thumbprint Icons](/icons/).\n     * You should pair \"Medium\" icons with `large` inputs and \"Small\" icons with `small` inputs.\n     */\n    children: React.ReactNode;\n}\n\n/**\n * Component that helps position icons within inputs.\n */\nconst InputIcon = ({ color = 'inherit', children }: InputIconPropTypes): JSX.Element => (\n    <InputIconContainer style={{ color }}>{children}</InputIconContainer>\n);\n\ninterface InputPropTypes {\n    /**\n     * Adds a HTML `id` attribute to the input. This is used for linking the HTML with a\n     * [Label](/components/label/react/).\n     */\n    id?: string;\n    /**\n     * Visually and functionally disable the input.\n     */\n    isDisabled?: boolean;\n    /**\n     * Adds `readonly` HTML attribute, allowing users to select (but not modify) the input.\n     */\n    isReadOnly?: boolean;\n    /**\n     * Adds the `required` HTML attribute.\n     */\n    isRequired?: boolean;\n    /**\n     * A regular expression that the `<input>` element's value is checked against when submitting a\n     * form.\n     */\n    pattern?: string;\n    /**\n     * The maximum number of characters that a user can enter. `onChange` will not fire if a user\n     * enters a character that exceeds `maxLength`.\n     */\n    maxLength?: number;\n    /**\n     * Makes the text and border color red.\n     */\n    hasError?: boolean;\n    /**\n     * Text that appears within the input when there is no `value`.\n     */\n    placeholder?: string;\n    /**\n     * Controls the height and padding of the input.\n     */\n    size?: 'small' | 'large';\n    /**\n     * Sets the `type` attribute on the input element.\n     */\n    type?: 'email' | 'password' | 'text' | 'search' | 'tel' | 'number';\n    /**\n     * A [proposed specification](https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute)\n     * that enables specification of virtual keyboard type in Chrome. Currently only supported in\n     * Chrome and Android.\n     */\n    inputMode?: 'numeric';\n    /**\n     * The HTML `name` attribute that will be pased to the input. It is required if working with a\n     * form that uses `<form action=\"\" method=\"\">` to submit data to a server.\n     */\n    name?: string;\n    /**\n     * The current value of the input.\n     */\n    value?: string | number;\n    /**\n     * Content that appears within the input on the left.\n     */\n    innerLeft?: React.ReactNode;\n    /**\n     * Content that appears within the input on the right.\n     */\n    innerRight?: React.ReactNode;\n    /**\n     * The function that is called when the input value changes.\n     *\n     * It receives two arguments: `onChange(newValue, event)`.\n     *\n     * The consumer of this component should use that data to update the `value` prop passed in to\n     * this component.\n     */\n    onChange: (value: string, event: React.ChangeEvent<HTMLInputElement>) => void;\n    /**\n     * Function that fires when you click into the input.\n     */\n    onClick?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\n    /**\n     * Fires when the input gains focus.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    /**\n     * Fires when the input loses focus, regardless of whether the value has changed.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    /**\n     * Fires when a key is pressed down with the input focused.\n     */\n    onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n    /**\n     * Fires when a key press is released with the input focused.\n     */\n    onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n    /**\n     * Fires when a valid key input is made.\n     */\n    onKeyPress?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n    /**\n     * This tells the browser to give the input focus when the page is loaded. This can [only be\n     * used once on a page](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autofocus).\n     */\n    shouldFocusOnPageLoad?: boolean;\n    /**\n     * A selector hook into the React component for use in automated testing environments. It is\n     * applied internally to the `<input />` element.\n     */\n    dataTest?: string;\n    /**\n     * This tells the browser whether to attempt autocompletion of the input.\n     * [Supports all values](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete).\n     */\n    autoComplete?: React.InputHTMLAttributes<HTMLInputElement>['autoComplete'];\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputPropTypes>(\n    (\n        {\n            id,\n            type = 'text',\n            isDisabled = false,\n            isReadOnly = false,\n            isRequired = false,\n            hasError = false,\n            placeholder,\n            size = 'large',\n            name,\n            value = '',\n            innerLeft,\n            innerRight,\n            onClick = (): void => {},\n            onChange = (): void => {},\n            onFocus = (): void => {},\n            onBlur = (): void => {},\n            onKeyDown = (): void => {},\n            onKeyUp = (): void => {},\n            onKeyPress = (): void => {},\n            shouldFocusOnPageLoad = false,\n            dataTest,\n            inputMode,\n            pattern,\n            maxLength,\n            autoComplete,\n        }: InputPropTypes,\n        outerRef,\n    ): JSX.Element => {\n        const uiState = getUIState({ isDisabled, isReadOnly, hasError });\n        // The input element rendered by this component. We use `useState` instead of\n        // `useRef` because callback refs allow us to add more than one `ref` to a DOM node.\n        const [inputEl, setInputEl] = useState<HTMLInputElement | null>(null);\n\n        const focusInput = (): void => {\n            if (inputEl) {\n                inputEl.focus();\n            }\n        };\n\n        /* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n        return (\n            <div\n                className={classNames({\n                    [styles.root]: true,\n                    [styles.rootUiStateDefault]: uiState === 'default',\n                    [styles.rootUiStateReadonly]: uiState === 'readonly',\n                    [styles.rootUiStateDisabled]: uiState === 'disabled',\n                    [styles.rootUiStateError]: uiState === 'error',\n                })}\n            >\n                {innerLeft && (\n                    <Context.Provider\n                        value={{\n                            hasValue: !!value,\n                            size,\n                            position: 'left',\n                        }}\n                    >\n                        <div className={styles.inputInnerElement} onClick={focusInput}>\n                            {innerLeft}\n                        </div>\n                    </Context.Provider>\n                )}\n\n                <input\n                    className={classNames({\n                        [styles.input]: true,\n                        [styles.inputError]: uiState === 'error',\n                        [styles.inputSizeSmall]: size === 'small',\n                        [styles.inputSizeLarge]: size === 'large',\n                        [styles.inputInnerLeft]: innerLeft,\n                        [styles.inputInnerRight]: innerRight,\n                    })}\n                    disabled={isDisabled}\n                    readOnly={isReadOnly}\n                    required={isRequired}\n                    placeholder={placeholder}\n                    // eslint-disable-next-line jsx-a11y/no-autofocus\n                    autoFocus={shouldFocusOnPageLoad}\n                    name={name}\n                    type={type}\n                    value={value}\n                    onChange={(e): void => onChange(e.target.value, e)}\n                    onClick={(e): void => onClick(e)}\n                    onFocus={(e): void => onFocus(e)}\n                    onBlur={(e): void => onBlur(e)}\n                    onKeyDown={(e): void => onKeyDown(e)}\n                    onKeyUp={(e): void => onKeyUp(e)}\n                    onKeyPress={(e): void => onKeyPress(e)}\n                    id={id}\n                    ref={(el): void => {\n                        setInputEl(el);\n\n                        // `outerRef` is the potential forwarded `ref` passed in from a consumer.\n                        // Not all refs are callable functions, so only try and call it if it is.\n                        if (typeof outerRef === 'function') {\n                            outerRef(el);\n                        }\n                    }}\n                    data-test={dataTest}\n                    inputMode={inputMode}\n                    pattern={pattern}\n                    maxLength={maxLength}\n                    autoComplete={autoComplete}\n                />\n\n                {innerRight && (\n                    <Context.Provider\n                        value={{\n                            hasValue: !!value,\n                            size,\n                            position: 'right',\n                        }}\n                    >\n                        <div className={styles.inputInnerElement} onClick={focusInput}>\n                            {innerRight}\n                        </div>\n                    </Context.Provider>\n                )}\n\n                <InputRowContext.Consumer>\n                    {({\n                        isWithinInputRow,\n                        isFirstInputRowChild,\n                        isLastInputRowChild,\n                    }): JSX.Element => (\n                        <div\n                            className={classNames({\n                                [styles.inputStyles]: true,\n                                [styles.inputStylesRoundedBordersLeft]:\n                                    isFirstInputRowChild || !isWithinInputRow,\n                                [styles.inputStylesRoundedBordersRight]:\n                                    isLastInputRowChild || !isWithinInputRow,\n                                [styles.inputStylesHasNoRightBorder]:\n                                    isWithinInputRow && !isLastInputRowChild,\n                                [styles.inputStylesUiStateDefault]: uiState === 'default',\n                                [styles.inputStylesUiStateReadonly]: uiState === 'readonly',\n                                [styles.inputStylesUiStateDisabled]: uiState === 'disabled',\n                                [styles.inputStylesUiStateError]: uiState === 'error',\n                            })}\n                        />\n                    )}\n                </InputRowContext.Consumer>\n            </div>\n        );\n    },\n);\nInput.displayName = 'Input';\n\nexport default Input;\nexport { InputIcon, InputClearButton, ClearButton };\n"],"names":["Context","React","createContext","hasValue","size","undefined","position","getUIState","isDisabled","isReadOnly","hasError","InputIconContainer","children","style","theme","classNames","styles","inputIconContainer","inputIconContainerPositionLeft","inputIconContainerPositionLeftSizeSmall","inputIconContainerPositionLeftSizeLarge","inputIconContainerPositionRight","inputIconContainerPositionRightSizeSmall","inputIconContainerPositionRightSizeLarge","InputClearButton","onClick","displayNone","unstyledButton","InputIcon","color","Input","forwardRef","outerRef","id","type","isRequired","placeholder","name","value","innerLeft","innerRight","onChange","onFocus","onBlur","onKeyDown","onKeyUp","onKeyPress","shouldFocusOnPageLoad","dataTest","inputMode","pattern","maxLength","autoComplete","uiState","useState","inputEl","setInputEl","focusInput","focus","root","rootUiStateDefault","rootUiStateReadonly","rootUiStateDisabled","rootUiStateError","inputInnerElement","input","inputError","inputSizeSmall","inputSizeLarge","inputInnerLeft","inputInnerRight","e","target","el","isWithinInputRow","isFirstInputRowChild","isLastInputRowChild","inputStyles","inputStylesRoundedBordersLeft","inputStylesRoundedBordersRight","inputStylesHasNoRightBorder","inputStylesUiStateDefault","inputStylesUiStateReadonly","inputStylesUiStateDisabled","inputStylesUiStateError","displayName"],"mappings":";;;;;;;;;;;;;;AAcA,IAAMA,OAAO,GAAGC,KAAK,CAACC,aAAN,CAAkC;EAC9CC,QAAQ,EAAE,KADoC;EAE9CC,IAAI,EAAEC,SAFwC;EAG9CC,QAAQ,EAAE;CAHE,CAAhB;;;;;AASA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAI4D;MAH3EC,UAG2E,QAH3EA,UAG2E;MAF3EC,UAE2E,QAF3EA,UAE2E;MAD3EC,QAC2E,QAD3EA,QAC2E;;MACvEF,UAAJ,EAAgB;WACL,UAAP;;;MAGAC,UAAJ,EAAgB;WACL,UAAP;;;MAGAC,QAAJ,EAAc;WACH,OAAP;;;SAGG,SAAP;CAjBJ;;;;;;;;;AAgCA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;MAAGC,QAAH,SAAGA,QAAH;MAAaC,KAAb,SAAaA,KAAb;SACvB,oBAAC,OAAD,CAAS,QAAT,QACK,UAACC,KAAD,EAAwB;;;QACfR,QAAQ,GAAGQ,KAAK,IAAIA,KAAK,CAACR,QAAhC;QACMF,IAAI,GAAGU,KAAK,IAAIA,KAAK,CAACV,IAA5B;WAGI;MACI,SAAS,EAAEW,UAAU,iDAChBC,MAAM,CAACC,kBADS,EACY,IADZ,gCAGhBD,MAAM,CAACE,8BAHS,EAGwBZ,QAAQ,KAAK,MAHrC,gCAIhBU,MAAM,CAACG,uCAJS,EAKbb,QAAQ,KAAK,MAAb,IAAuBF,IAAI,KAAK,OALnB,gCAMhBY,MAAM,CAACI,uCANS,EAObd,QAAQ,KAAK,MAAb,IAAuBF,IAAI,KAAK,OAPnB,gCAShBY,MAAM,CAACK,+BATS,EASyBf,QAAQ,KAAK,OATtC,gCAUhBU,MAAM,CAACM,wCAVS,EAWbhB,QAAQ,KAAK,OAAb,IAAwBF,IAAI,KAAK,OAXpB,gCAYhBY,MAAM,CAACO,wCAZS,EAabjB,QAAQ,KAAK,OAAb,IAAwBF,IAAI,KAAK,OAbpB,gBADzB;MAgBI,KAAK,EAAES;OAEND,QAlBL,CADJ;GALR,CADuB;CAA3B;;;;;;AAwCA,IAAMY,gBAAgB,GAAG,SAAnBA,gBAAmB;MAAGC,OAAH,SAAGA,OAAH;SACrB,oBAAC,kBAAD,QACI,oBAAC,OAAD,CAAS,QAAT,QACK,UAACX,KAAD;WACG;MACI,SAAS,EAAEC,UAAU,CAAC;QAClBW,WAAW,EAAEZ,KAAK,IAAI,CAACA,KAAK,CAACX;OADZ;OAIrB;MACI,SAAS,EAAEa,MAAM,CAACW,cADtB;oBAEe,aAFf;MAGI,OAAO,EAAEF,OAHb;MAII,IAAI,EAAC;OAEL,oBAAC,oBAAD,OANJ,CALJ,CADH;GADL,CADJ,CADqB;CAAzB;;;;;AAyCA,IAAMG,SAAS,GAAG,SAAZA,SAAY;0BAAGC,KAAH;MAAGA,KAAH,4BAAW,SAAX;MAAsBjB,QAAtB,SAAsBA,QAAtB;SACd,oBAAC,kBAAD;IAAoB,KAAK,EAAE;MAAEiB,KAAK,EAALA;;KAAUjB,QAAvC,CADc;CAAlB;;AAyHA,IAAMkB,KAAK,GAAG7B,KAAK,CAAC8B,UAAN,CACV,iBA4BIC,QA5BJ,EA6BkB;;;MA3BVC,EA2BU,SA3BVA,EA2BU;yBA1BVC,IA0BU;MA1BVA,IA0BU,2BA1BH,MA0BG;+BAzBV1B,UAyBU;MAzBVA,UAyBU,iCAzBG,KAyBH;+BAxBVC,UAwBU;MAxBVA,UAwBU,iCAxBG,KAwBH;+BAvBV0B,UAuBU;MAvBVA,UAuBU,iCAvBG,KAuBH;6BAtBVzB,QAsBU;MAtBVA,QAsBU,+BAtBC,KAsBD;MArBV0B,WAqBU,SArBVA,WAqBU;yBApBVhC,IAoBU;MApBVA,IAoBU,2BApBH,OAoBG;MAnBViC,IAmBU,SAnBVA,IAmBU;0BAlBVC,KAkBU;MAlBVA,KAkBU,4BAlBF,EAkBE;MAjBVC,SAiBU,SAjBVA,SAiBU;MAhBVC,UAgBU,SAhBVA,UAgBU;4BAfVf,OAeU;MAfVA,QAeU,8BAfA,YAAY,EAeZ;6BAdVgB,QAcU;MAdVA,SAcU,+BAdC,YAAY,EAcb;4BAbVC,OAaU;MAbVA,QAaU,8BAbA,YAAY,EAaZ;2BAZVC,MAYU;MAZVA,OAYU,6BAZD,YAAY,EAYX;8BAXVC,SAWU;MAXVA,UAWU,gCAXE,YAAY,EAWd;4BAVVC,OAUU;MAVVA,QAUU,8BAVA,YAAY,EAUZ;+BATVC,UASU;MATVA,WASU,iCATG,YAAY,EASf;oCARVC,qBAQU;MARVA,qBAQU,sCARc,KAQd;MAPVC,QAOU,SAPVA,QAOU;MANVC,SAMU,SANVA,SAMU;MALVC,OAKU,SALVA,OAKU;MAJVC,SAIU,SAJVA,SAIU;MAHVC,YAGU,SAHVA,YAGU;;MACRC,OAAO,GAAG9C,UAAU,CAAC;IAAEC,UAAU,EAAVA,UAAF;IAAcC,UAAU,EAAVA,UAAd;IAA0BC,QAAQ,EAARA;GAA3B,CAA1B,CADc;;;kBAIgB4C,QAAQ,CAA0B,IAA1B,CAJxB;;MAIPC,OAJO;MAIEC,UAJF;;MAMRC,UAAU,GAAG,SAAbA,UAAa,GAAY;QACvBF,OAAJ,EAAa;MACTA,OAAO,CAACG,KAAR;;GAFR;;;;SAQI;IACI,SAAS,EAAE3C,UAAU,mDAChBC,MAAM,CAAC2C,IADS,EACF,IADE,iCAEhB3C,MAAM,CAAC4C,kBAFS,EAEYP,OAAO,KAAK,SAFxB,iCAGhBrC,MAAM,CAAC6C,mBAHS,EAGaR,OAAO,KAAK,UAHzB,iCAIhBrC,MAAM,CAAC8C,mBAJS,EAIaT,OAAO,KAAK,UAJzB,iCAKhBrC,MAAM,CAAC+C,gBALS,EAKUV,OAAO,KAAK,OALtB;KAQpBd,SAAS,IACN,oBAAC,OAAD,CAAS,QAAT;IACI,KAAK,EAAE;MACHpC,QAAQ,EAAE,CAAC,CAACmC,KADT;MAEHlC,IAAI,EAAJA,IAFG;MAGHE,QAAQ,EAAE;;KAGd;IAAK,SAAS,EAAEU,MAAM,CAACgD,iBAAvB;IAA0C,OAAO,EAAEP;KAC9ClB,SADL,CAPJ,CAVR,EAuBI;IACI,SAAS,EAAExB,UAAU,mDAChBC,MAAM,CAACiD,KADS,EACD,IADC,iCAEhBjD,MAAM,CAACkD,UAFS,EAEIb,OAAO,KAAK,OAFhB,iCAGhBrC,MAAM,CAACmD,cAHS,EAGQ/D,IAAI,KAAK,OAHjB,iCAIhBY,MAAM,CAACoD,cAJS,EAIQhE,IAAI,KAAK,OAJjB,iCAKhBY,MAAM,CAACqD,cALS,EAKQ9B,SALR,iCAMhBvB,MAAM,CAACsD,eANS,EAMS9B,UANT,iBADzB;IASI,QAAQ,EAAEhC,UATd;IAUI,QAAQ,EAAEC,UAVd;IAWI,QAAQ,EAAE0B,UAXd;IAYI,WAAW,EAAEC,WAZjB;;IAcI,SAAS,EAAEW,qBAdf;IAeI,IAAI,EAAEV,IAfV;IAgBI,IAAI,EAAEH,IAhBV;IAiBI,KAAK,EAAEI,KAjBX;IAkBI,QAAQ,EAAE,kBAACiC,CAAD;aAAa9B,SAAQ,CAAC8B,CAAC,CAACC,MAAF,CAASlC,KAAV,EAAiBiC,CAAjB,CAArB;KAlBd;IAmBI,OAAO,EAAE,iBAACA,CAAD;aAAa9C,QAAO,CAAC8C,CAAD,CAApB;KAnBb;IAoBI,OAAO,EAAE,iBAACA,CAAD;aAAa7B,QAAO,CAAC6B,CAAD,CAApB;KApBb;IAqBI,MAAM,EAAE,gBAACA,CAAD;aAAa5B,OAAM,CAAC4B,CAAD,CAAnB;KArBZ;IAsBI,SAAS,EAAE,mBAACA,CAAD;aAAa3B,UAAS,CAAC2B,CAAD,CAAtB;KAtBf;IAuBI,OAAO,EAAE,iBAACA,CAAD;aAAa1B,QAAO,CAAC0B,CAAD,CAApB;KAvBb;IAwBI,UAAU,EAAE,oBAACA,CAAD;aAAazB,WAAU,CAACyB,CAAD,CAAvB;KAxBhB;IAyBI,EAAE,EAAEtC,EAzBR;IA0BI,GAAG,EAAE,aAACwC,EAAD,EAAc;MACfjB,UAAU,CAACiB,EAAD,CAAV,CADe;;;UAKX,OAAOzC,QAAP,KAAoB,UAAxB,EAAoC;QAChCA,QAAQ,CAACyC,EAAD,CAAR;;KAhCZ;iBAmCezB,QAnCf;IAoCI,SAAS,EAAEC,SApCf;IAqCI,OAAO,EAAEC,OArCb;IAsCI,SAAS,EAAEC,SAtCf;IAuCI,YAAY,EAAEC;IA9DtB,EAiEKZ,UAAU,IACP,oBAAC,OAAD,CAAS,QAAT;IACI,KAAK,EAAE;MACHrC,QAAQ,EAAE,CAAC,CAACmC,KADT;MAEHlC,IAAI,EAAJA,IAFG;MAGHE,QAAQ,EAAE;;KAGd;IAAK,SAAS,EAAEU,MAAM,CAACgD,iBAAvB;IAA0C,OAAO,EAAEP;KAC9CjB,UADL,CAPJ,CAlER,EA+EI,oBAAC,eAAD,CAAiB,QAAjB,QACK;;;QACGkC,gBADH,SACGA,gBADH;QAEGC,oBAFH,SAEGA,oBAFH;QAGGC,mBAHH,SAGGA,mBAHH;WAKG;MACI,SAAS,EAAE7D,UAAU,mDAChBC,MAAM,CAAC6D,WADS,EACK,IADL,iCAEhB7D,MAAM,CAAC8D,6BAFS,EAGbH,oBAAoB,IAAI,CAACD,gBAHZ,iCAIhB1D,MAAM,CAAC+D,8BAJS,EAKbH,mBAAmB,IAAI,CAACF,gBALX,iCAMhB1D,MAAM,CAACgE,2BANS,EAObN,gBAAgB,IAAI,CAACE,mBAPR,iCAQhB5D,MAAM,CAACiE,yBARS,EAQmB5B,OAAO,KAAK,SAR/B,iCAShBrC,MAAM,CAACkE,0BATS,EASoB7B,OAAO,KAAK,UAThC,iCAUhBrC,MAAM,CAACmE,0BAVS,EAUoB9B,OAAO,KAAK,UAVhC,iCAWhBrC,MAAM,CAACoE,uBAXS,EAWiB/B,OAAO,KAAK,OAX7B;MAN5B;GADL,CA/EJ,CADJ;CA3CM,CAAd;AAsJAvB,KAAK,CAACuD,WAAN,GAAoB,OAApB;;;;;"}