{"version":3,"file":"utilities.js","sources":["../../../../components/DatePicker/utilities.ts"],"sourcesContent":["import some from 'lodash/some';\nimport castArray from 'lodash/castArray';\nimport map from 'lodash/map';\n\nimport isAfter from 'date-fns/is_after';\nimport isBefore from 'date-fns/is_before';\nimport endOfDay from 'date-fns/end_of_day';\nimport startOfDay from 'date-fns/start_of_day';\nimport parse from 'date-fns/parse';\n\nimport { DateIsh, PropTypes } from './types';\n\n// Throws an error `message` with a prefix showing that it comes from the DatePicker.\nfunction throwError(message: string): void {\n    throw new Error(`TUI DatePicker: ${message}`);\n}\n\n// Returns true any of the given `dates` fall on a day before the day of `cutoff`.\nexport function hasAnyPastDays(dates: Date[], cutoff: Date = new Date()): boolean {\n    return some(dates, date => isBefore(endOfDay(date), cutoff));\n}\n\n// Returns true any of the given `dates` fall on a day after the day of `cutoff`.\nexport function hasAnyFutureDays(dates: Date[], cutoff: Date = new Date()): boolean {\n    return some(dates, date => isAfter(startOfDay(date), cutoff));\n}\n\n// Normalise the `value` prop to always be an array of dates.\nexport function normaliseValue(value: PropTypes['value']): Date[] {\n    const valueArr: DateIsh[] = castArray<DateIsh>(value);\n    return map<DateIsh, Date>(valueArr, d => parse(d));\n}\n\n// Validate the `props` object and throw errors if there are any inconsistencies.\nexport function validateProps(props: PropTypes): void {\n    const days = normaliseValue(props.value);\n\n    if (!props.allowMultiSelection && days.length > 1) {\n        throwError('`allowMultiSelection` is `false` but multiple dates were provided');\n    }\n\n    const { before, after } = props.disabledDays || {};\n    if (before && hasAnyPastDays(days, before)) {\n        throwError(\n            `Days before ${before} are disabled but one or more provided days fall before that.`,\n        );\n    }\n\n    if (after && hasAnyFutureDays(days, after)) {\n        throwError(\n            `Days after ${after} are disabled but one or more provided days fall after that.`,\n        );\n    }\n}\n"],"names":["throwError","message","Error","hasAnyPastDays","dates","cutoff","Date","some","date","isBefore","endOfDay","hasAnyFutureDays","isAfter","startOfDay","normaliseValue","value","valueArr","castArray","map","d","parse","validateProps","props","days","allowMultiSelection","length","disabledDays","before","after"],"mappings":";;;;;;;;;AAYA;AACA,SAASA,UAAT,CAAoBC,OAApB,EAA2C;QACjC,IAAIC,KAAJ,2BAA6BD,OAA7B,EAAN;;;;AAIJ,AAAO,SAASE,cAAT,CAAwBC,KAAxB,EAA2E;MAApCC,MAAoC,uEAArB,IAAIC,IAAJ,EAAqB;SACvEC,IAAI,CAACH,KAAD,EAAQ,UAAAI,IAAI;WAAIC,QAAQ,CAACC,QAAQ,CAACF,IAAD,CAAT,EAAiBH,MAAjB,CAAZ;GAAZ,CAAX;;;AAIJ,AAAO,SAASM,gBAAT,CAA0BP,KAA1B,EAA6E;MAApCC,MAAoC,uEAArB,IAAIC,IAAJ,EAAqB;SACzEC,IAAI,CAACH,KAAD,EAAQ,UAAAI,IAAI;WAAII,OAAO,CAACC,UAAU,CAACL,IAAD,CAAX,EAAmBH,MAAnB,CAAX;GAAZ,CAAX;;;AAIJ,AAAO,SAASS,cAAT,CAAwBC,KAAxB,EAA2D;MACxDC,QAAmB,GAAGC,SAAS,CAAUF,KAAV,CAArC;SACOG,GAAG,CAAgBF,QAAhB,EAA0B,UAAAG,CAAC;WAAIC,KAAK,CAACD,CAAD,CAAT;GAA3B,CAAV;;;AAIJ,AAAO,SAASE,aAAT,CAAuBC,KAAvB,EAA+C;MAC5CC,IAAI,GAAGT,cAAc,CAACQ,KAAK,CAACP,KAAP,CAA3B;;MAEI,CAACO,KAAK,CAACE,mBAAP,IAA8BD,IAAI,CAACE,MAAL,GAAc,CAAhD,EAAmD;IAC/CzB,UAAU,CAAC,mEAAD,CAAV;;;aAGsBsB,KAAK,CAACI,YAAN,IAAsB,EAPE;MAO1CC,MAP0C,QAO1CA,MAP0C;MAOlCC,KAPkC,QAOlCA,KAPkC;;MAQ9CD,MAAM,IAAIxB,cAAc,CAACoB,IAAD,EAAOI,MAAP,CAA5B,EAA4C;IACxC3B,UAAU,uBACS2B,MADT,mEAAV;;;MAKAC,KAAK,IAAIjB,gBAAgB,CAACY,IAAD,EAAOK,KAAP,CAA7B,EAA4C;IACxC5B,UAAU,sBACQ4B,KADR,kEAAV;;;;;;"}