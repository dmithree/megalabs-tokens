{"version":3,"file":"index.js","sources":["../../../../components/Textarea/index.tsx"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport styles from './index.module.scss';\n\ntype UiState = 'disabled' | 'error' | 'default';\n\nconst getUIState = ({\n    hasError,\n    isDisabled,\n}: {\n    hasError: boolean;\n    isDisabled: boolean;\n}): UiState => {\n    if (isDisabled) {\n        return 'disabled';\n    }\n\n    if (hasError) {\n        return 'error';\n    }\n\n    return 'default';\n};\n\ninterface PropTypes {\n    /**\n     * Adds a HTML `id` attribute to the textarea. This is used for linking the HTML with a\n     * [Label](/components/label/react/).\n     */\n    id?: string;\n    /**\n     * Visually and functionally disable the textarea.\n     */\n    isDisabled?: boolean;\n    /**\n     * Adds the `required` HTML attribute to the textarea.\n     */\n    isRequired?: boolean;\n    /**\n     * Makes the textarea border and text color red.\n     */\n    hasError?: boolean;\n    /**\n     * Text that appears within the textarea when there is no `value`.\n     */\n    placeholder?: string;\n    /**\n     * Adds `name` HTML attribute to element, indicating the property name associated with the selected value.\n     */\n    name?: string;\n    /**\n     * The current value of the textarea.\n     */\n    value: string;\n    /**\n     * The maximum number of characters that a user can enter. `onChange` will not fire if a user\n     * enters a character that exceeds `maxLength`.\n     */\n    maxLength?: number;\n    /**\n     * The function that is called when the textarea value changes.\n     *\n     * It receives two arguments: `onChange(newValue, event)`.\n     *\n     * The consumer of this component should use that data to update the `value` prop passed in to\n     * this component.\n     */\n    onChange: (newValue: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    /**\n     * Fires when the textarea receives focus.\n     */\n    onFocus?: () => void;\n    /**\n     * Fires when the textarea loses focus.\n     */\n    onBlur?: () => void;\n    /**\n     * A selector hook into the React component for use in automated testing environments. It is\n     * applied internally to the `<textarea />` element.\n     */\n    dataTest?: string;\n}\n\nexport default function Textarea({\n    dataTest,\n    hasError = false,\n    id,\n    isDisabled = false,\n    isRequired = false,\n    maxLength,\n    onBlur,\n    onChange,\n    onFocus,\n    placeholder,\n    value,\n    name,\n}: PropTypes): JSX.Element {\n    const uiState = getUIState({ hasError, isDisabled });\n\n    return (\n        <textarea\n            className={classNames({\n                [styles.root]: true,\n                [styles.rootStateDisabled]: uiState === 'disabled',\n                [styles.rootStateError]: uiState === 'error',\n                [styles.rootStateDefault]: uiState === 'default',\n            })}\n            id={id}\n            disabled={isDisabled}\n            maxLength={maxLength}\n            required={isRequired}\n            placeholder={placeholder}\n            value={value}\n            onChange={(event): void => onChange(event.target.value, event)}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            data-test={dataTest}\n            name={name}\n        />\n    );\n}\n"],"names":["getUIState","hasError","isDisabled","Textarea","dataTest","id","isRequired","maxLength","onBlur","onChange","onFocus","placeholder","value","name","uiState","React","classNames","styles","root","rootStateDisabled","rootStateError","rootStateDefault","event","target"],"mappings":";;;;;;;;;;AAMA,IAAMA,UAAU,GAAG,SAAbA,UAAa,OAMJ;MALXC,QAKW,QALXA,QAKW;MAJXC,UAIW,QAJXA,UAIW;;MACPA,UAAJ,EAAgB;WACL,UAAP;;;MAGAD,QAAJ,EAAc;WACH,OAAP;;;SAGG,SAAP;CAfJ;;AA6EA,AAAe,SAASE,QAAT,QAaY;;;MAZvBC,QAYuB,SAZvBA,QAYuB;6BAXvBH,QAWuB;MAXvBA,QAWuB,+BAXZ,KAWY;MAVvBI,EAUuB,SAVvBA,EAUuB;+BATvBH,UASuB;MATvBA,UASuB,iCATV,KASU;+BARvBI,UAQuB;MARvBA,UAQuB,iCARV,KAQU;MAPvBC,SAOuB,SAPvBA,SAOuB;MANvBC,MAMuB,SANvBA,MAMuB;MALvBC,SAKuB,SALvBA,QAKuB;MAJvBC,OAIuB,SAJvBA,OAIuB;MAHvBC,WAGuB,SAHvBA,WAGuB;MAFvBC,KAEuB,SAFvBA,KAEuB;MADvBC,IACuB,SADvBA,IACuB;MACjBC,OAAO,GAAGd,UAAU,CAAC;IAAEC,QAAQ,EAARA,QAAF;IAAYC,UAAU,EAAVA;GAAb,CAA1B;SAGIa;IACI,SAAS,EAAEC,UAAU,0EAChBC,MAAM,CAACC,IADS,EACF,IADE,yDAEhBD,MAAM,CAACE,iBAFS,EAEWL,OAAO,KAAK,UAFvB,yDAGhBG,MAAM,CAACG,cAHS,EAGQN,OAAO,KAAK,OAHpB,yDAIhBG,MAAM,CAACI,gBAJS,EAIUP,OAAO,KAAK,SAJtB,gBADzB;IAOI,EAAE,EAAET,EAPR;IAQI,QAAQ,EAAEH,UARd;IASI,SAAS,EAAEK,SATf;IAUI,QAAQ,EAAED,UAVd;IAWI,WAAW,EAAEK,WAXjB;IAYI,KAAK,EAAEC,KAZX;IAaI,QAAQ,EAAE,kBAACU,KAAD;aAAiBb,SAAQ,CAACa,KAAK,CAACC,MAAN,CAAaX,KAAd,EAAqBU,KAArB,CAAzB;KAbd;IAcI,OAAO,EAAEZ,OAdb;IAeI,MAAM,EAAEF,MAfZ;iBAgBeJ,QAhBf;IAiBI,IAAI,EAAES;IAlBd;;;;;"}